#@ load("@ytt:overlay", "overlay")
#@ load("@ytt:template", "template")
#@ load("@ytt:yaml", "yaml")

#@ def get_issuer():
apiVersion: cert-manager.io/v1
kind: Issuer
metadata:
  name: "issuer"
  namespace: "issuer-namespace"
spec: {}
#@ end

#@ def self_signed_issuer():
spec:
  #@overlay/match missing_ok=True
  selfSigned: {}
#@ end

#@ def ca_issuer():
spec:
  #@overlay/match missing_ok=True
  ca:
    secretName: "ca-key-pair"
#@ end

#@ def ca_secret(secret_name):
spec:
  ca:
    secretName: #@ secret_name
#@ end

#! Generate a Selfsigned Issuer - see: https://cert-manager.io/docs/reference/api-docs/#cert-manager.io/v1.Issuer
#@ def get_self_signed_issuer():
#@   return overlay.apply(get_issuer(), self_signed_issuer())
#@ end

#@ def get_ca_issuer():
#@   return overlay.apply(get_issuer(), ca_issuer())
#@ end

#@ def generate_self_signed_issuer(name, namespace):
#@   return overlay.apply(get_self_signed_issuer(), metadata(name, namespace))
#@ end

#@ def generate_ca_issuer(name, namespace, secret_name):
#@   return overlay.apply(get_ca_issuer(), metadata(name, namespace), ca_secret(secret_name))
#@ end

#@ def get_certificate():
apiVersion: cert-manager.io/v1
kind: Certificate
metadata:
  name: "certificate"
  namespace: "certificate-namespace"
spec:
  secretName: "ca-key-pair"
  commonName: "certificate"
  isCA: false
  subject:
  usages:
    - server auth
    - client auth
  privateKey:
    algorithm: "algorithm"
    encoding: "encoding"
    size: "size"
  keystores:
    pkcs12:
      create: true
      passwordSecretRef:
        name: pkcs12-pass
        key: password
  dnsNames: []
  ipAddresses: []
  duration: 8760h
  renewBefore: 360h
  issuerRef:
    name: "ca-issuer"
    kind: Issuer
    group: cert-manager.io

#@ end

#@ def ca_certificate(isCA):
spec:
  isCA: #@ isCA
#@ end

#@ def x509_subject(subject):
spec:
  subject: #@ subject
#@ end

#@ def ip_address(ips):
spec:
  #@overlay/replace
  ipAddresses:
    #@ for ip in ips:
    - #@ ip
    #@ end
#@ end

#@ def dns_name(names):
spec:
  #@overlay/replace
  dnsNames:
    #@ for n in names:
    - #@ n
    #@ end
#@ end

#@ def keystore(keystore):
spec:
  keystores:
    #@overlay/match missing_ok=True
    pkcs12:
      create: #@ keystore.create
      passwordSecretRef:
        name: #@ keystore.passwordSecretRef.name
        key: #@ keystore.passwordSecretRef.key
#@ end

#@ def server_certificate():
spec:
  #@overlay/replace
  usages:
    - server auth
#@ end

#@ def client_certificate():
spec:
  #@overlay/replace
  usages:
    - client auth
#@ end

#@ def get_certificate_with_params(args):
#@   return overlay.apply(get_certificate(), ca_certificate(args[0]), ip_address(args[1]))
#@ end

#@ def get_ca_certificate():
#@   return overlay.apply(get_certificate(), ca_certificate(True))
#@ end

#@ def get_server_certificate():
#@   return overlay.apply(get_certificate(), server_certificate())
#@ end

#@ def get_client_certificate():
#@   return overlay.apply(get_certificate(), client_certificate())
#@ end

#@ def metadata(name, namespace):
metadata:
  name: #@ name
  namespace: #@ namespace
#@ end

#@ def certificate_secret(secret_name):
spec:
  secretName: #@ secret_name
#@ end

#@ def certificate_details(duration, renew_before, common_name, dns_names):
spec:
  duration: #@ duration
  renewBefore: #@ renew_before
  #@overlay/replace
  commonName: #@ common_name
  #@overlay/replace
  dnsNames:
  #@ for n in dns_names:
  - #@ n
  #@ end
#@ end

#@ def certificate_issuer(issuer_name):
spec:
  issuerRef:
    name: #@ issuer_name
#@ end

#@ def generate_dns_names(name, namespace):
#@   full_name = name + "." + namespace
#@   svc_name = full_name + ".svc"
#@   svc_cluster_local_name = svc_name + ".cluster.local"
#@   return [name, full_name, svc_name, svc_cluster_local_name]
#@ end

#@ def certificate_generate(certificate_func, name, namespace, duration, renew_before, secret_name, common_name, dns_names, cert_subject, cert_keystore, issuer_name):
#@  return overlay.apply(certificate_func(), metadata(name, namespace), certificate_secret(secret_name), certificate_details(duration, renew_before, common_name, dns_names), x509_subject(cert_subject), keystore(cert_keystore), certificate_issuer(issuer_name))
#@ end

#@ def generate_certificate(name, namespace, duration, renew_before, secret_name, common_name, dns_names, cert_subject, cert_keystore, issuer_name):
#@   return certificate_generate(get_certificate, name, namespace, duration, renew_before, secret_name, common_name, dns_names, cert_subject, cert_keystore, issuer_name)
#@ end
